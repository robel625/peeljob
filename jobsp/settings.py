"""
Django settings for jobsp project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = os.path.dirname(os.path.dirname(__file__))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-%6h5in6*eo94u13uhulm_j0=fk6(1u%qgxb!kyf3(fv%3ty*vq"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS =  ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "peeldb", 
    "pjob",
    "mpcomp",
    'dashboard',
    'recruiter',
    "candidate",
    "tickets",
    "search",
    "agency",
    "social",
     # 'django_simple_forum',
    'simple_pagination',
    # 'django_blog_it',
    'compressor',
    'imagekit',
    'sorl.thumbnail',
    'haystack',
    # 'tellme',
    'django_celery_beat',
]

AUTH_USER_MODEL = 'peeldb.User'
LOGIN_URL = '/'

MONGO_HOST = 'mongodb'
MONGO_PORT = 27017
MONGO_DB = 'local'
# MONGO_USER = 'mongo1'
# MONGO_PWD = 'mongo1'

# Haystack settings for Elasticsearch
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch7_backend.Elasticsearch7SearchEngine',
        'URL': 'http://elasticsearch:9200/',
        'INDEX_NAME': 'job_haystack',
    },
}
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
HAYSTACK_DEFAULT_OPERATOR = 'OR'
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 1

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    # 'jobsp.middlewares.CsrfMiddleware',
    'jobsp.middlewares.DetectMobileBrowser',
]

ROOT_URLCONF = "jobsp.urls"

AUTHENTICATION_BACKENDS = [
    'social.auth_backend.PasswordlessAuthBackend',
    'django.contrib.auth.backends.ModelBackend',
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR + "/templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "peeldb.context_processors.get_pj_icons",
            ],
        },
    },
]

WSGI_APPLICATION = "jobsp.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "postgres",
        "USER": "postgres",
        "PASSWORD": "postgres",
        "HOST": "pgdb",
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIMEZONE = 'Asia/Calcutta'

USE_I18N = True

USE_TZ = True

SITE_ID = 1


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)

COMPRESS_ROOT = 'static/files/'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'compressor.finders.CompressorFinder',
)

COMPRESS_ENABLED = True
COMPRESS_OFFLINE = True
COMPRESS_OFFLINE_CONTEXT = {
'STATIC_URL': STATIC_URL,
}

# COMPRESS_OUTPUT_DIR = 'CACHE'
# COMPRESS_URL = STATIC_URL
# COMPRESS_ENABLED = True

COMPRESS_PRECOMPILERS = (
    ('text/less', 'lessc {infile} {outfile}'),
    ('text/x-sass', 'sass {infile} {outfile}'),
    ('text/x-scss', 'sass {infile} {outfile}'),
)


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# MEDIA_URL = '/media'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CACHES = {
'default': {
'BACKEND': 'django_redis.cache.RedisCache',
'LOCATION': 'redis://redis:6379/0',
'OPTIONS': {
'CLIENT_CLASS': 'django_redis.client.DefaultClient',
}
}
}


SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# LOCAL_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


INACTIVE_MAIL_SENDER = 'robelgulima1@gmail.com'

DEFAULT_FROM_EMAIL = 'robelgulima1@gmail.com'
INACTIVE_MAIL_SENDER = 'robelgulima1@gmail.com'
MAIL_SENDER = 'robelgulima1@gmail.com'

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_HOST_USER = 'robelgulima1@gmail.com'
# EMAIL_HOST_PASSWORD = ''
# EMAIL_PORT =  '587'
# EMAIL_USE_TLS = True
# EMAIL_USE_SSL = False    

# EMAIL_HOST = 'smtp.mailosaur.net'
# EMAIL_HOST_USER = 'gqynzoli@mailosaur.net'
# EMAIL_HOST_PASSWORD = 'bAc1oPDgJRKHkLSVejnythfcxr876lxE'
# EMAIL_PORT =  '587'

EMAIL_HOST = 'sandbox.smtp.mailtrap.io'
EMAIL_HOST_USER = '234f7429728d59'
EMAIL_HOST_PASSWORD = '149e364b2c721f'
EMAIL_PORT = '2525'



CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
CELERY_IMPORTS = ("social.tasks", "dashboard.tasks", "recruiter.tasks")

CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CELERY_TIMEZONE = 'UTC'

CELERY_BEAT_SCHEDULE = {
    # Executes every day evening at 5:00 PM GMT +5.30
    'moving-published-jobs-to-live': {
        'task': 'dashboard.tasks.jobpost_published',
        'schedule': crontab(minute='*', day_of_week='mon,tue,wed,thu,fri,sat'),
    },
    'sending-today-applied-users-info-to-recruiters': {
        'task': 'dashboard.tasks.recruiter_jobpost_applicants',
        'schedule': crontab(hour='16', minute='00', day_of_week='mon,tue,wed,thu,fri,sat'),
    },
    'sending-profile_update-notifications-to-applicants': {
        'task': 'dashboard.tasks.applicants_notifications',
        'schedule': crontab(hour='16', minute='00', day_of_week='mon,tue,wed,thu,fri,sat'),
    },
    'sending-daily-statistics-report-to-admins': {
        'task': 'dashboard.tasks.daily_report',
        'schedule': crontab(hour='08', minute='00', day_of_week='mon,tue,wed,thu,fri,sat,sun'),
    },
    'sending-weekly-jobs-notifications-to-applicants': {
        'task': 'dashboard.tasks.applicants_job_notifications',
        'schedule': crontab(hour='09', minute='00', day_of_week='mon'),
    },
    'all-users-profile-update-and-birthday-notifications': {
        'task': 'dashboard.tasks.alerting_applicants',
        'schedule': crontab(hour='10', minute='05', day_of_week='mon,tue,wed,thu,fri,sat,sun'),
    },
    'alerting-all-inactive-users-and-applicants-resume-upload-notifications': {
        'task': 'dashboard.tasks.applicants_profile_update_notifications',
        'schedule': crontab(hour='09', minute='00', day_of_week='mon,tue,wed,thu,fri,sat,sun'),
    },
    'sending-profile-update-notifications-two-hours-after-registering': {
        'task': 'dashboard.tasks.applicants_profile_update_notifications_two_hours',
        'schedule': crontab(hour='*/2', minute='00', day_of_week='mon,tue,wed,thu,fri,sat,sun'),
    },
    'walkin-notifications-to-applicants': {
        'task': 'dashboard.tasks.applicants_walkin_job_notifications',
        'schedule': crontab(hour='09', minute='00', day_of_week='thu'),
    },
    'handling-sendgrid-bounces': {
        'task': 'dashboard.tasks.handle_sendgrid_bounces',
        'schedule': crontab(hour='03', minute='10', day_of_week='mon,tue,wed,thu,fri,sat'),
    },
    'daily-sitemap-generation': {
        'task': 'dashboard.tasks.sitemap_generation',
        'schedule': crontab(hour='00', minute='10', day_of_week='mon,tue,wed,thu,fri,sat'),
    },
    'sending-today-live-jobs-to-users-based-on-profile': {
        'task': 'dashboard.tasks.job_alerts_to_users',
        'schedule': crontab(hour='17', minute='00', day_of_week='mon,tue,wed,thu,fri,sat,sun'),
    },
    'sending-today-live-jobs-to-alerts': {
        'task': 'dashboard.tasks.job_alerts_to_alerts',
        'schedule': crontab(hour='10', minute='00', day_of_week='mon,tue,wed,thu,fri,sat,sun'),
    },
    'sending-today-live-jobs-to-subscribers': {
        'task': 'dashboard.tasks.job_alerts_to_subscribers',
        'schedule': crontab(hour='18', minute='00', day_of_week='mon,tue,wed,thu,fri,sat,sun'),
    },
    'checking-meta-data': {
        'task': 'dashboard.tasks.check_meta_data',
        'schedule': crontab(hour='*/6', minute='00', day_of_week='mon,tue,wed,thu,fri,sat,sun'),
    },
    'recruiter-profile-update-notifications': {
        'task': 'dashboard.tasks.recruiter_profile_update_notifications',
        'schedule': crontab(hour='09', minute='30', day_of_week='mon'),
    },
    'haystack-rebuilding-indexes': {
        'task': 'dashboard.tasks.rebuilding_index',
        'schedule': crontab(hour='00', minute='20', day_of_week='mon,tue,wed,thu,fri,sat,sun'),
    },

}

# fb app
FB_APP_ID = '547723917061958'
FB_SECRET = 'eefeb3487586bd2d03de3cc893dcc12b'
# FB_PEELJOBS_PAGEID = os.getenv('FBPEELJOBSPAGEID')

# FB_ACCESS_TOKEN = os.getenv('FBACCESSTOKEN')
# FB_PAGE_ACCESS_TOKEN = os.getenv('FBPAGEACCESSTOKEN')
# FB_GROUP_ACCESS_TOKEN = os.getenv('FBGROUPACCESSTOKEN')
# FB_ALL_GROUPS_TOKEN = os.getenv('FBALLGROUPSTOKEN')
# FB_DEL_ACCESS_TOKEN = os.getenv('FBDELACCESSTOKEN')
# REC_FB_ACCESS_TOKEN = os.getenv('RECFBACCESSTOKEN')


GIT_APP_ID = '37471e928f959d8b88ab'
GIT_APP_SECRET = 'c0071dd6af6b177b54fd7b0d987c3a89d5a40388'

CONTACT_NUMBER = "0910118088"